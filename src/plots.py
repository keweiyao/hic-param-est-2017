"""
Generates plots / figures when run as a script.
Plot files are placed in the :file:`plots` directory.

By default, simply running ``python -m src.plots`` generates **ALL** plots,
which may not be desired.  Instead, one can pass a list of plots to generate:
``python -m src.plots plot1 plot2 ...``.  The full list of plots is shown in
the usage information ``python -m src.plots --help``.

Typing can be reduced by using shell brace expansion, e.g. ``python -m
src.plots observables_{design,posterior}`` for both ``observables_design`` and
``observables_posterior``.  In addition, plots may be given as paths to plot
filenames, which enables shell globbing, e.g. ``python -m src.plots
plots/observables_*``.

In the code, each plot is generated by a function tagged with the ``@plot``
decorator.
"""

import itertools
import logging
from pathlib import Path
import subprocess
import tempfile
import warnings

import h5py
import hsluv
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import lines
from matplotlib import patches
from matplotlib import ticker
from scipy import special
from scipy.interpolate import PchipInterpolator
from sklearn.decomposition import PCA
from sklearn.gaussian_process import GaussianProcessRegressor as GPR
from sklearn.gaussian_process import kernels
from sklearn.mixture import GaussianMixture

from . import workdir, systems, parse_system, expt, model, mcmc
from .design import Design
from .emulator import emulators
from matplotlib.gridspec import GridSpec
from scipy.optimize import brentq

fontsmall, fontnormal, fontlarge = 5, 6, 7
offblack = '#262626'
aspect = 1/1.618
resolution = 72.27
textwidth = 307.28987/resolution
textheight = 261.39864/resolution
fullwidth = 350/resolution
fullheight = 270/resolution

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'sans-serif',
    'font.sans-serif': ['Lato'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'sans',
    'mathtext.it': 'sans:italic:medium',
    'mathtext.cal': 'sans',
    'font.size': fontnormal,
    'legend.fontsize': fontnormal,
    'axes.labelsize': fontnormal,
    'axes.titlesize': fontlarge,
    'xtick.labelsize': fontsmall,
    'ytick.labelsize': fontsmall,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .5,
    'lines.markersize': 3,
    'lines.markeredgewidth': 0,
    'patch.linewidth': .5,
    'axes.linewidth': .4,
    'xtick.major.width': .4,
    'ytick.major.width': .4,
    'xtick.minor.width': .4,
    'ytick.minor.width': .4,
    'xtick.major.size': 1.2,
    'ytick.major.size': 1.2,
    'xtick.minor.size': .8,
    'ytick.minor.size': .8,
    'xtick.major.pad': 1.5,
    'ytick.major.pad': 1.5,
    'axes.formatter.limits': (-5, 5),
    'axes.spines.top': False,
    'axes.spines.right': False,
    'axes.labelpad': 3,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.cmap': 'Blues',
    'image.interpolation': 'none',
    'pdf.fonttype': 42
})


plotdir = workdir / 'plots'
plotdir.mkdir(exist_ok=True)

plot_functions = {}


def plot(f):
    """
    Plot function decorator.  Calls the function, does several generic tasks,
    and saves the figure as the function name.

    """
    def wrapper(*args, **kwargs):
        logging.info('generating plot: %s', f.__name__)
        f(*args, **kwargs)

        fig = plt.gcf()

        if not fig.get_tight_layout():
            set_tight(fig)

        plotfile = plotdir / '{}.pdf'.format(f.__name__)
        fig.savefig(str(plotfile))
        logging.info('wrote %s', plotfile)
        plt.close(fig)

    plot_functions[f.__name__] = wrapper

    return wrapper


def set_tight(fig=None, **kwargs):
    """
    Set tight_layout with a better default pad.

    """
    if fig is None:
        fig = plt.gcf()

    kwargs.setdefault('pad', .1)
    fig.set_tight_layout(kwargs)


def auto_ticks(ax, axis='both', minor=False, **kwargs):
    """
    Convenient interface to matplotlib.ticker locators.

    """
    axis_list = []

    if axis in {'x', 'both'}:
        axis_list.append(ax.xaxis)
    if axis in {'y', 'both'}:
        axis_list.append(ax.yaxis)

    for axis in axis_list:
        axis.get_major_locator().set_params(**kwargs)
        if minor:
            axis.set_minor_locator(ticker.AutoMinorLocator(minor))


def format_system(system):
    """
    Format a system string into a display name, e.g.:

    >>> format_system('PbPb2760')
    'Pb+Pb 2.76 TeV'

    >>> format_system('AuAu200')
    'Au+Au 200 GeV'

    """
    proj, energy = parse_system(system)

    if energy > 1000:
        energy /= 1000
        prefix = 'T'
    else:
        prefix = 'G'

    return '{} {} {}eV'.format('+'.join(proj), energy, prefix)


def darken(rgb, amount=.5):
    """
    Darken a color by the given amount in HSLuv space.

    """
    h, s, l = hsluv.rgb_to_hsluv(rgb)
    return hsluv.hsluv_to_rgb((h, s, (1 - amount)*l))


def obs_color_hsluv(obs, nPDF):
    """
    Return a nice color for the given observable in HSLuv space.
    Use obs_color() to obtain an RGB color.

    """
    if obs == 'RAA':
        if nPDF == 'EPPS':
            return 250, 90, 55
        else:
            return 130, 90, 55

    if obs == 'V2':
        if nPDF == 'EPPS':
            return 250, 90, 55
        else:
            return 130, 90, 55

    if obs == 'qhat':
        if nPDF == 'EPPS':
            return 250, 90, 55
        else:
            return 130, 90, 55

    if obs == 'posterior':
        if nPDF == 'EPPS':
            return 250, 90, 55
        else:
            return 130, 90, 55

    raise ValueError('unknown observable: {} {}'.format(obs, subobs))


def obs_color(obs, nPDF):
    """
    Return a nice color for the given observable.

    """
    return hsluv.hsluv_to_rgb(obs_color_hsluv(obs, nPDF))


def _observables_plots():
    """
    Metadata for observables plots.

    """

    return [
        dict(
            title='RAA',
            ylabel=(
                r'$R_{AA}$'
            ),
            xscale='log',
            xlim=(1, 50),
            ylim=(0, 1.2),
            height_ratio=1.0,
            subplots=[
                ('ALICE', 'RAA', 'D-avg', '0-10', 
                            dict(label=r'$0-10(\%)$', scale=1)),
                ('ALICE', 'RAA', 'D-avg', '30-50', 
                            dict(label=r'$30-50(\%)$', scale=1)),
                ('ALICE', 'RAA', 'D-avg', '60-80', 
                            dict(label=r'$60-80(\%)$', scale=1)),
            ]
        ),
        dict(
            title='V2',
            ylabel=(
                r'$R_{AA}$'
            ),
            xscale='log',
            xlim=(1, 24),
            ylim=(-.05, 0.3),
            height_ratio=1.0,
            subplots=[
                ('ALICE', 'V2', 'D-avg', '30-50', dict(label=r'$30-50(\%)$', scale=1))
            ]
        ),
        dict(
            title='RAA',
            ylabel=(
                r'$R_{AA}$'
            ),
            xscale='log',
            xlim=(1, 100),
            ylim=(0, 1),
            height_ratio=1.0,
            subplots=[
                ('CMS', 'RAA', 'D0', '0-10', dict(label=r'$0-10(\%)$', scale=1)),
                ('CMS', 'RAA', 'D0', '0-100', dict(label=r'$0-100(\%)$', scale=1))
            ]
        ),
        dict(
            title='RAA',
            ylabel=(
                r'$R_{AA}$'
            ),
            xscale='log',
            xlim=(5, 50),
            ylim=(0, 1),
            height_ratio=1.0,
            subplots=[
                ('CMS', 'RAA', 'B', '0-100', dict(label=r'$0-100(\%)$', scale=1)),
            ]
        ),
        dict(
            title='V2',
            ylabel=(
                r'$v_{2}\{2\}$'
            ),
            xscale='log',
            xlim=(1,40),
            ylim=(-0.05, 0.3),
            height_ratio=1.0,
            subplots=[
                ('CMS', 'V2', 'D0', '0-10', dict(label=r'$0-10(\%)$', scale=1)),
                ('CMS', 'V2', 'D0', '10-30', dict(label=r'$10-30(\%)$', scale=1)),
                ('CMS', 'V2', 'D0', '30-50', dict(label=r'$30-50(\%)$', scale=1))
            ]
        )
    ]


def _observables(posterior=False, nPDF=None, plot_type='violins'):
    """
    Model observables at all design points or drawn from the posterior with
    experimental data points.

    """
    plots = _observables_plots()
    nrows = len(plots)
    ncols = [len(item['subplots']) for item in plots]

    if posterior:
        samples = mcmc.Chain(nPDF=nPDF).samples(400)
    fig = plt.figure(figsize=(fullwidth, 0.8*fullwidth))

    gs = GridSpec(3, 12)
    ax1 = plt.subplot(gs[0, :3])
    ax2 = plt.subplot(gs[0, 3:6])
    ax3 = plt.subplot(gs[0, 6:9])
    ax4 = plt.subplot(gs[0, 9:])
    ax5 = plt.subplot(gs[1, :4])
    ax6 = plt.subplot(gs[1, 4:8])
    ax7 = plt.subplot(gs[1, 8:])
    ax8 = plt.subplot(gs[2, :4])
    ax9 = plt.subplot(gs[2, 4:8])
    ax10 = plt.subplot(gs[2, 8:])
    system = 'PbPb5020'
    allaxes = [[ax8, ax9, ax10], [ax4], [ax5, ax6], [ax7], [ax1, ax2, ax3]]
    for plot, rowax in zip(plots, allaxes):
        for (exp, obs, specie, cen, opts), ax in zip(plot['subplots'], rowax):
            # load exp
            try:
                dset = expt.data[system][exp][obs][specie][cen]
            except KeyError:
                continue

            scale = opts.get('scale')

            color = obs_color(obs, nPDF)
            print(exp, obs, specie, cen)
            x = model.data[system][nPDF][exp][obs][specie][cen]['x']
            Y = samples[system][exp][obs][specie][cen] if posterior else model.data[system][nPDF][exp][obs][specie][cen]['Y']
            w = [h-l for l, h in dset['pT'] ]
            if scale is not None:
                Y = Y*scale

            if plot_type=='lines':
                for y in Y:
                    ax.plot(x, y, color=color, alpha=.2, lw=.3,)
            elif plot_type=='violins':
                violin = ax.violinplot(list(Y.T), x, widths=w, showextrema=True, showmedians=True)
                for b in violin['bodies']:
                    b.set_color(color)
                for partname in ('cbars','cmins','cmaxes','cmedians'):
                    vp = violin[partname]
                    vp.set_edgecolor(color)
                    vp.set_linewidth(1)
            else:
                raise KeyError("Unknown plot type")

            x = dset['x']
            y = dset['y']
            xerr = [(ph-pl)/2. for (pl, ph) in dset['pT']]
            yerr = np.sqrt(sum(
                e**2 for e in dset['yerr'].values()
            ))

            ax.set_xlim(plot['xlim'])

            if scale is not None:
                y = y*scale
                yerr = yerr*scale

            ax.errorbar(
                x, y, xerr=xerr, yerr=yerr, fmt='D', ms=1.7,
                capsize=0, color='.25', zorder=1000
            )
            ax.set_title(label=exp+' '+specie+', '+opts['label'], fontsize=5)

            if plot.get('yscale') == 'log':
                ax.set_yscale('log')
                ax.minorticks_off()
            else:
                auto_ticks(ax, 'y', nbins=4, minor=2)

            if plot.get('xscale') == 'log':
                ax.set_xscale('log')
                ax.minorticks_off()
            else:
                auto_ticks(ax, 'x', nbins=5, minor=2)

            ax.set_ylim(plot['ylim'])


            if ax.is_last_row():
                ax.set_xlabel(r'$p_T$ [GeV]')

            if ax.is_first_col():
                ax.set_ylabel(plot['ylabel'])

            if ax.is_last_col():
                ax.text(
                    1.02, .5, plot['title'],
                    transform=ax.transAxes, ha='left', va='center',
                    size=plt.rcParams['axes.labelsize'], rotation=-90
                )
            ax.legend(loc='best')
    plt.suptitle(format_system(system))

    set_tight(fig, rect=[0, 0, .97, 0.94])

alpha0 = 4.*np.pi/(11. - 2./3.*3)
Lambda2 = 0.2**2
def alpha_s(Q2, T, mu):
    scale = (mu*np.pi*T)**2
    Q2 = np.max([np.abs(Q2), scale])
    if Q2 < Lambda2*2.71828:
        return alpha0
    else:
        return alpha0/np.log(Q2/Lambda2)

def naive_LO_mD2(T, mu):
    return alpha_s(0., T, mu)*48./np.pi*T*T
naive_LO_mD2 = np.vectorize(naive_LO_mD2)

def mD2_LO_sf(T, mu):    
    def mD2_LO_eq(m2, T, mu):
        return alpha_s(m2,T,mu)*48./np.pi*T*T - m2

    return brentq(mD2_LO_eq, 0.01, 100., args=(T, mu))
mD2_LO_sf = np.vectorize(mD2_LO_sf)

@plot
def Ds_etas():
    def etas(T):
        Tc = 0.154
        return 0.085 + .83*(T-Tc)*(T/Tc)**(-0.37)
    with h5py.File('./transport/kappa.h5', 'r') as f:
        D2piT = {'EPPS':{'c': [],'b': []},'nCTEQ':{'c':[],'b':[]}}
        for nPDF in ['EPPS','nCTEQ']:
            gpPDF = f[nPDF]
            for i, gp in enumerate(gpPDF):
                gp = gpPDF[gp]
                a = gp.attrs
                mu, A, B = a['mu'], a['A'], a['B']
                E = a['E']
                T = a['T']
                D2piT[nPDF]['c'].append(4.*np.pi/(gp['c/kd'].value+gp['c/kt'].value))
                D2piT[nPDF]['b'].append(4.*np.pi/(gp['b/kd'].value+gp['b/kt'].value))
    
    fig, axes = plt.subplots(nrows=1, ncols=2, sharex=True, sharey=True,
                             figsize=(fullwidth, 0.5*fullwidth))
    Tc = 0.154
    etasJB = etas(T[0:7])
    #mD = np.sqrt(mD2_LO_sf(T,mu))
    T = T[0:7]/Tc
    
    for j, (ax, ptype) in enumerate(zip(axes, ['c', 'b'])):
        for i, (nPDF, shift) in enumerate(zip(['EPPS', 'nCTEQ'], [-1,1])):
            color = obs_color('qhat', nPDF)

            res = np.array([item[0,0:7]/etasJB/2./np.pi for item in D2piT[nPDF][ptype]]).T # as function of T
            w = (T[1]-T[0])/2.
            mid = np.median(res, axis=1)
            violin = ax.violinplot(list(res), T+shift*w/2., widths=w, showextrema=False, showmedians=True)
            for b in violin['bodies']:
                b.set_color(color)
            for partname in ['cmedians']:
                vp = violin[partname]
                vp.set_edgecolor(color)
                vp.set_linewidth(1)
            ax.plot(T+shift*w/2., mid, 'D', color=color, label="Extract with "+nPDF)
        ax.set_title('Charm quark' if ptype=='c' else 'Bottom quark')

        if ax.is_first_col():
            ax.set_ylabel(r'$(D_s T) / (\eta/s)$')
            ax.legend(framealpha=0., loc='upper left')
        ax.set_xlabel(r'$T/T_c$')
        ax.set_xlim(0.5, 3.5)
        ax.set_ylim(0.0, 16.)

    set_tight(fig, rect=[0, 0, .97, 1])

@plot
def Ds_ratio():
    with h5py.File('./transport/kappa.h5', 'r') as f:
        D2piT = {'EPPS':{'c': [],'b': []},'nCTEQ':{'c':[],'b':[]}}
        for nPDF in ['EPPS','nCTEQ']:
            gpPDF = f[nPDF]
            for i, gp in enumerate(gpPDF):
                gp = gpPDF[gp]
                a = gp.attrs
                mu, A, B = a['mu'], a['A'], a['B']
                E = a['E']
                T = a['T']
                D2piT[nPDF]['c'].append(4.*np.pi/(gp['c/kd'].value+gp['c/kt'].value))
                D2piT[nPDF]['b'].append(4.*np.pi/(gp['b/kd'].value+gp['b/kt'].value))
    
    fig, ax = plt.subplots(nrows=1, ncols=1, sharex=True, sharey=True,
                             figsize=(0.5*fullwidth, 0.5*fullwidth))
    Tc = 0.154
    T = T[0:7]/Tc
    
    for i, (nPDF, shift) in enumerate(zip(['EPPS', 'nCTEQ'], [-1,1])):
        color = obs_color('qhat', nPDF)

        resc = np.array([item[0,0:7] for item in D2piT[nPDF]['c']]).T # as function of T
        resb = np.array([item[0,0:7] for item in D2piT[nPDF]['b']]).T # as function of T
        res = resc/resb
        w = (T[1]-T[0])/2.
        mid = np.median(res, axis=1)
        violin = ax.violinplot(list(res), T+shift*w/2., widths=w, showextrema=False, showmedians=True)
        for b in violin['bodies']:
            b.set_color(color)
        for partname in ['cmedians']:
            vp = violin[partname]
            vp.set_edgecolor(color)
            vp.set_linewidth(1)
        ax.plot(T+shift*w/2., mid, 'D', color=color, label="Extract with "+nPDF)

    ax.set_ylabel(r'$D_{s,\mathrm{charm}} / D_{s,\mathrm{bottom}}$')
    ax.legend(framealpha=0., loc='upper left')
    ax.set_xlabel(r'$T/T_c$')
    ax.set_xlim(0.5, 3.5)
    ax.set_ylim(0.0, 1.5)

    set_tight(fig, rect=[0, 0, .97, 1])

@plot
def qhat_p():
    with h5py.File('./transport/kappa.h5', 'r') as f:
        qhat = {'EPPS':{'c': [],'b': []},'nCTEQ':{'c':[],'b':[]}}
        for nPDF in ['EPPS','nCTEQ']:
            gpPDF = f[nPDF]
            for i, gp in enumerate(gpPDF):
                gp = gpPDF[gp]
                a = gp.attrs
                mu, A, B = a['mu'], a['A'], a['B']
                E = a['E']
                T = a['T']
                qhat[nPDF]['c'].append(2.*(gp['c/kd'].value+gp['c/kt'].value))
                qhat[nPDF]['b'].append(2.*(gp['b/kd'].value+gp['b/kt'].value))
    
    T = T[3]
    print(T)
    fig, axes = plt.subplots(nrows=1, ncols=2, sharex=True, sharey=True,
                             figsize=(fullwidth, 0.5*fullwidth))
    for j, (ax, ptype) in enumerate(zip(axes, ['c', 'b'])):
        E = np.linspace(4.3, 130, 60) if ptype=='b' else np.linspace(4.3, 130, 100)
        E = E[::5]
        for i, (nPDF, shift) in enumerate(zip(['EPPS', 'nCTEQ'], [-1,1])):
            color = obs_color('qhat', nPDF)

            res = np.array([item[::5,3] for item in qhat[nPDF][ptype]]).T # as function of E
            print(res.shape, E.shape)
            w = (E[1]-E[0])/2.
            mid = np.median(res, axis=1)
            violin = ax.violinplot(list(res), E+shift*w/2., widths=w, showextrema=False, showmedians=True)
            for b in violin['bodies']:
                b.set_color(color)
            for partname in ['cmedians']:
                vp = violin[partname]
                vp.set_edgecolor(color)
                vp.set_linewidth(1)
            ax.plot(E+shift*w/2., mid, 'D', color=color, label="Extract with "+nPDF)
        ax.set_title('Charm quark' if ptype=='c' else 'Bottom quark')

        if ax.is_first_col():
            ax.set_ylabel(r'$\hat{q}/T^3$')
            ax.legend(framealpha=0., loc='upper left')
        ax.set_xlabel(r'$E$ [GeV]')
        ax.set_xlim(0.0, 100)
        ax.set_ylim(0.0, 10.)

    set_tight(fig, rect=[0, 0, .97, 1])

@plot
def Ds_posterior():
    lattice1_x = [1.46, 2.20, 2.93]
    lattice1_y = [1.8, 2.0, 2.3]
    lattice1_stat = [0.7, 0.4, 0.4]
    lattice1_sys = [(0.5, 1.3), (1.2, 0.6), (1.1, 0.2)]
    lattice2_x = [1.04102920332607,
    1.09086415407343,
    1.2418949863598,
    1.49949352441474,
    1.93950565736037,
    ]
    lattice2_y = [4.80608444754841,
    6.22087578147966,
    4.04148418878713,
    4.45467839268429,
    9.77960354476739,
    ]
    lattice2_stat = [0.827511828685804,
    0.8275118286858,
    1.26110735597276,
    0.157638419496596,
    4.01977969716318,
    ]
    lattice2_sys = [(1.61552417882614,    3.27117695189699),
    (2.20684799928101,    3.94131998210016),
    (1.41865590179804,    4.25650694742203),
    (1.45806550667218,    2.71917286264494),
    (5.911350857451,    6.6604928447451),
    ]
    yx =  {'l':np.array([ 0.9902318363359932, 1.1245992295754803,
            1.235554540226716, 1.7900947669426444,
            1.473897733628479, 2.042333960911595,
            1.6941698242518295, 2.398399281567322,
            1.9812908155628908, 2.649378067321557,
            2.286482909652364, 2.796530726389012,
            2.530923327792789, 3.0486123693311207,
            2.7872273382541777, 3.1453486998101567,
            3.074238043846451, 3.3446507487612607,
            3.3671254027398128, 3.4404417730792574]).reshape(-1,2),
           'h':
            np.array([0.9936506936183955, 2.726578070472577,
            1.238752826071544, 3.2887201342334755,
            1.4722119376413036, 4.109560984063716,
            1.6881513750265866, 5.292611644596398,
            1.984126734045989, 6.835351299402099,
            2.273894582607942, 8.326571768431506,
            2.53295573603901, 9.715226518988842,
            2.7919066037512903, 11.052204532743046,
            3.0821155951883923, 12.750131948984983,
            3.4090182207762543, 14.498790795869017]).reshape(-1,2)
          }

    with h5py.File('./transport/kappa.h5', 'r') as f:
        D2piT = {'EPPS':{'c': [],'b': []},'nCTEQ':{'c':[],'b':[]}}
        for nPDF in ['EPPS','nCTEQ']:
            gpPDF = f[nPDF]
            for i, gp in enumerate(gpPDF):
                gp = gpPDF[gp]
                a = gp.attrs
                mu, A, B = a['mu'], a['A'], a['B']
                E = a['E']
                T = a['T']
                D2piT[nPDF]['c'].append(4.*np.pi/(gp['c/kd'].value+gp['c/kt'].value))
                D2piT[nPDF]['b'].append(4.*np.pi/(gp['b/kd'].value+gp['b/kt'].value))
    
    fig, axes = plt.subplots(nrows=1, ncols=2, sharex=True, sharey=True,
                             figsize=(fullwidth, 0.5*fullwidth))
    Tc = 0.154
    T = T[0:7]/Tc
    for j, (ax, ptype) in enumerate(zip(axes, ['c', 'b'])):
        for i, (nPDF, shift) in enumerate(zip(['EPPS', 'nCTEQ'], [-1,1])):
            color = obs_color('qhat', nPDF)

            res = np.array([item[0,0:7] for item in D2piT[nPDF][ptype]]).T # as function of T
            w = (T[1]-T[0])/2.
            mid = np.median(res, axis=1)
            violin = ax.violinplot(list(res), T+shift*w/2., widths=w, showextrema=False, showmedians=True)
            for b in violin['bodies']:
                b.set_color(color)
            for partname in ['cmedians']:
                vp = violin[partname]
                vp.set_edgecolor(color)
                vp.set_linewidth(1)
            ax.plot(T+shift*w/2., mid, 'D', color=color, label="Extract with "+nPDF)
        ax.set_title('Charm quark' if ptype=='c' else 'Bottom quark')

        _,caps,_ = ax.errorbar(lattice2_x, lattice2_y,  yerr=lattice2_stat, fmt='kD', linewidth=1., label='LQCD, static', capsize=1.5)
        for cap in caps:
            cap.set_markeredgewidth(.05)
        ax.errorbar(lattice2_x, lattice2_y,  yerr=np.array(lattice2_sys).T, fmt='kD', linewidth=0.6, markersize=1)

        if ax.is_first_col():
            ax.set_ylabel(r'$D_s 2\pi T$')
            # Yingru
            ax.fill_between(yx['l'][:,0], yx['l'][:,1], yx['h'][:,1], color='r',alpha=0.3, label="Yingru's extraction for charm")
            _,caps,_ = ax.errorbar(lattice1_x, lattice1_y,  yerr=lattice1_stat, fmt='rD', label='LQCD, charm', capsize=1.5)
            for cap in caps:
                cap.set_markeredgewidth(.05)
            ax.errorbar(lattice1_x, lattice1_y,  yerr=np.array(lattice1_sys).T, fmt='rD', linewidth=0.6, markersize=1)
            ax.legend(framealpha=0., loc='upper left')
        ax.set_xlabel(r'$T/T_c$')
        ax.set_xlim(0.5, 3.5)
        ax.set_ylim(0.0, 20.)

    set_tight(fig, rect=[0, 0, .97, 1])

@plot
def observables_design_EPPS():
    _observables(posterior=False, nPDF='EPPS', plot_type='lines')

@plot
def observables_design_nCTEQ():
    _observables(posterior=False, nPDF='nCTEQ', plot_type='lines')

@plot
def observables_posterior_EPPS():
    _observables(posterior=True,  nPDF='EPPS', plot_type='violins')

@plot
def observables_posterior_nCTEQ():
    _observables(posterior=True,  nPDF='nCTEQ', plot_type='violins')

@plot
def observables_map():
    """
    Model observables and ratio to experiment at the maximum a posteriori
    (MAP) estimate.

    """
    plots = _observables_plots()

    ylim = {
        'Yields': (2, 1e5),
        'Flow cumulants': (0, .15),
        'Mean $p_T$': (0, 1.7),
        'Mean $p_T$ fluctuations': (0, .045),
    }

    for n, p in enumerate(plots):
        p['ylim'] = ylim[p['title']]
        if p['title'] == 'Flow cumulants':
            move_index = n
            p.update(
                ylabel=r'$v_n\{k\}$',
                subplots=[
                    ('vnk', nk, dict(label='$v_{}\{{{}\}}$'.format(*nk)))
                    for nk in [(2, 2), (2, 4), (3, 2), (4, 2)]
                ],
                legend=True
            )

    plots.insert(1, plots.pop(move_index))

    ncols = int(len(plots)/2)

    fig, axes = plt.subplots(
        nrows=4, ncols=ncols,
        figsize=(.8*fullwidth, .4*ncols*fullwidth),
        gridspec_kw=dict(
            height_ratios=list(itertools.chain.from_iterable(
                (p.get('height_ratio', 1), .4) for p in plots[::ncols]
            ))
        )
    )

    labels = {}
    handles = dict(expt={}, model={})

    for plot, ax, ratio_ax in zip(plots, axes[::2].flat, axes[1::2].flat):
        for system, (obs, specie, cen) in itertools.product(
                systems, plot['subplots']
        ):
            color = obs_color(obs, nPDF)
            scale = opts.get('scale')

            linestyle, fill_markers = {
                'PbPb2760': ('solid', True),
                'PbPb5020': ('dashed', False),
            }[system]

            x = model.map_data[system][obs][subobs]['x']
            y = model.map_data[system][obs][subobs]['Y']

            if scale is not None:
                y = y*scale

            ax.plot(x, y, color=color, ls=linestyle)
            handles['model'][system] = \
                lines.Line2D([], [], color=offblack, ls=linestyle)

            if 'label' in opts and (obs, subobs) not in labels:
                labels[obs, subobs] = ax.text(
                    x[-1] + 3, y[-1],
                    opts['label'],
                    color=darken(color), ha='left', va='center'
                )

            try:
                dset = expt.data[system][obs][subobs]
            except KeyError:
                continue

            x = dset['x']
            yexp = dset['y']
            yerr = dset['yerr']
            yerrstat = yerr.get('stat')
            yerrsys = yerr.get('sys', yerr.get('sum'))

            if scale is not None:
                yexp = yexp*scale
                if yerrstat is not None:
                    yerrstat = yerrstat*scale
                if yerrsys is not None:
                    yerrsys = yerrsys*scale

            handles['expt'][system] = ax.errorbar(
                x, yexp, yerr=yerrstat, fmt='o', ms=1.7,
                capsize=0, color=offblack,
                mfc=(offblack if fill_markers else '.9'),
                mec=offblack, mew=(0 if fill_markers else .25),
                zorder=1000
            )

            ax.fill_between(
                x, yexp - yerrsys, yexp + yerrsys,
                facecolor='.9', zorder=-10,
            )

            ratio_ax.plot(x, y/yexp, color=color, ls=linestyle)
            ax.set_xlim(plot['xlim'])
            ax.set_ylim(plot['ylim'])
        if plot.get('yscale') == 'log':
            ax.set_yscale('log')
            ax.minorticks_off()
        else:
            auto_ticks(ax, 'y', nbins=4, minor=2)

        for a in [ax, ratio_ax]:
            auto_ticks(a, 'x', nbins=5, minor=2)

        if ratio_ax.is_last_row():
            ratio_ax.set_xlabel('Centrality %')


        ax.set_ylabel(plot['ylabel'])

        if plot.get('legend'):
            ax.legend(
                [handles[t][s] for t in ['model', 'expt'] for s in systems],
                [fmt.format(parse_system(s)[1]/1000)
                 for fmt in ['', '{} TeV'] for s in systems],
                ncol=2, loc='upper left', bbox_to_anchor=(0, .94),
                columnspacing=0, handletextpad=0
            )

        ax.text(
            .5, 1 if ax.is_first_row() else .97, plot['title'],
            transform=ax.transAxes, ha='center', va='top',
            size=plt.rcParams['axes.labelsize']
        )

        ratio_ax.axhline(1, lw=.5, color='0.5', zorder=-100)
        ratio_ax.axhspan(.9, 1.1, color='0.93', zorder=-200)
        ratio_ax.set_ylim(.85, 1.15)
        ratio_ax.set_ylabel('Ratio')
        ratio_ax.text(
            ratio_ax.get_xlim()[1], .9, '±10%',
            color='.6', zorder=-50,
            ha='right', va='bottom',
            size=plt.rcParams['xtick.labelsize']
        )

    set_tight(fig)


@plot
def find_map():
    """
    Find the maximum a posteriori (MAP) point and compare emulator predictions
    to experimental data.

    """
    from scipy.optimize import minimize
    nPDFs = ['EPPS', 'nCTEQ']
    chain = {nPDF: mcmc.Chain(nPDF=nPDF) for nPDF in nPDFs}

    fixed_params = {
        'tau_0': .8,
        'model_sys_err': .1,
    }

    opt_params = [k for k in chain['EPPS'].keys if k not in fixed_params]

    def full_x(x):
        x = dict(zip(opt_params, x), **fixed_params)
        return [x[k] for k in chain['EPPS'].keys]

    res = {nPDF: minimize(
        lambda x: -chain[nPDF].log_posterior(full_x(x))[0],
        x0=np.median(chain[nPDF].load(*opt_params, thin=1000), axis=0),
        tol=1e-8,
        bounds=[
            (a + 1e-6*(b - a), b - 1e-6*(b - a))
            for (a, b), k in zip(chain[nPDF].range, chain[nPDF].keys)
            if k in opt_params
        ]
      ) for nPDF in nPDFs}

    logging.info('optimization result:\n%s', res)


    preds = {nPDF: chain[nPDF]._predict(np.atleast_2d(full_x(res[nPDF].x))) \
                for nPDF in nPDFs}

    plots = _observables_plots()

    fig = plt.figure(figsize=(fullwidth, 0.6*fullwidth))

    gs = GridSpec(3, 12)
    ax1 = plt.subplot(gs[0, :3])
    ax2 = plt.subplot(gs[0, 3:6])
    ax3 = plt.subplot(gs[0, 6:9])
    ax4 = plt.subplot(gs[0, 9:])
    ax5 = plt.subplot(gs[1, :4])
    ax6 = plt.subplot(gs[1, 4:8])
    ax7 = plt.subplot(gs[1, 8:])
    ax8 = plt.subplot(gs[2, :4])
    ax9 = plt.subplot(gs[2, 4:8])
    ax10 = plt.subplot(gs[2, 8:])
    system = 'PbPb5020'
    allaxes = [[ax8, ax9, ax10], [ax4], [ax5, ax6], [ax7], [ax1, ax2, ax3]]

    for plot, rowax in zip(plots, allaxes):
        for (exp, obs, specie, cen, opts), ax in zip(plot['subplots'], rowax):
            ax.set_xlim(plot['xlim'])
            ax.semilogx()
            ax.set_ylim(plot['ylim'])
            ax.minorticks_off()


            try:
                dset = expt.data[system][exp][obs][specie][cen]
                w = [h-l for l, h in dset['pT'] ]
            except KeyError:
                continue

            x = dset['x']
            yexp = dset['y']
            yerr = dset['yerr']
            yerrstat = yerr.get('stat')
            yerrsys = yerr.get('sys', yerr.get('sum'))

            
            ax.set_title(exp+' '+specie+', '+opts['label'], fontsize=6)
            # ratio plot
            for nPDF in nPDFs:
                color = obs_color(obs, nPDF)
                x = model.data[system][nPDF][exp][obs][specie][cen]['x']
                y = preds[nPDF][system][exp][obs][specie][cen][0]

                ax.errorbar(
                    x, yexp/y, yerr=yerrstat/y, fmt='o', ms=1.7,
                    capsize=0, color=color, zorder=1000
                )
                for ix, iw, il, ih, ic in \
                    zip(x, w, yexp - yerrsys, yexp + yerrsys, y):
                    ax.fill_between(
                        [ix-iw/2., ix+iw/2.],
                        [il/ic, il/ic], [ih/ic, ih/ic],
                        zorder=-10,
                        facecolor='white', edgecolor=color
                    )
                ax.plot(plot['xlim'], np.ones_like(plot['xlim']), 'k-')
                ax.set_ylim(0,3)
                ax.fill_between(plot['xlim'], np.ones_like(plot['xlim'])*.7,
                                np.ones_like(plot['xlim'])*1.3, 
                                color='grey', alpha=.2, label=r'$\pm$ 30%')
           
            if ax.is_last_row():
                ax.set_xlabel(r'$p_T$ [GeV]')

            if ax.is_first_col():
                ax.set_ylabel(plot['ylabel'])
            if ax.is_first_col():
                ax.set_ylabel(plot['ylabel']+', exp./calc.')

            if ax.is_last_col():
                ax.text(
                    1.02, .5, plot['title'],
                    transform=ax.transAxes, ha='left', va='center',
                    size=plt.rcParams['axes.labelsize'], rotation=-90
                )


    set_tight(fig, rect=[0., 0., .97, 1])


def format_ci(samples, ci=.9):
    """
    Compute the median and a credible interval for an array of samples and
    return a TeX-formatted string.

    """
    cil, cih = mcmc.credible_interval(samples, ci=ci)
    median = np.median(samples)
    ul = median - cil
    uh = cih - median

    # decide precision for formatting numbers
    # this is NOT general but it works for the present data
    if abs(median) < .2 and ul < .02:
        precision = 3
    elif abs(median) < 1:
        precision = 2
    else:
        precision = 1

    fmt = str(precision).join(['{:#.', 'f}'])

    return ''.join([
        '$', fmt.format(median),
        '_{-', fmt.format(ul), '}',
        '^{+', fmt.format(uh), '}$'
    ]), {'m': median, 'l': ul, 'h': uh}


def _posterior(
        params=None, ignore=None,
        scale=1, padr=.99, padt=.98,
        cmap=None, nPDFs=None
):
    """
    Triangle plot of posterior marginal and joint distributions.

    """
    chain = {nPDF: mcmc.Chain(nPDF=nPDF) for nPDF in nPDFs}


    if params is None and ignore is None:
        params = set(chain[nPDFs[0]].keys)
    elif params is not None:
        params = set(params)
    elif ignore is not None:
        params = set(chain[nPDFs[0]].keys) - set(ignore)

    keys, labels, ranges = map(list, zip(*(
        i for i in zip(chain[nPDFs[0]].keys,
                       chain[nPDFs[0]].labels, chain[nPDFs[0]].range)
        if i[0] in params
    )))
    print(ranges)
    ndim = len(params)

    data = {nPDF: chain[nPDF].load(*keys).T for nPDF in nPDFs}
    # output some samples
    for nPDF in nPDFs:
        indices = np.random.choice(data[nPDF].shape[1], 200)
        with open(nPDF+"-sample-parameter.txt", 'w') as f:
            ps = data[nPDF][:, indices]
            for p in ps.T:
                print(np.exp(p[1]), '\t', np.exp(p[2])-1., '\t',
                     np.exp(p[3])-1., file=f)
    if 'mu' in keys:
        key = 'mu'
        for nPDF in nPDFs:
            data[nPDF][keys.index(key)] = \
                            np.exp(data[nPDF][keys.index(key)])
        ranges[keys.index(key)] = np.exp(ranges[keys.index(key)])
        labels[keys.index(key)] = r'$\mu$'
    if 'tau_0' in keys:
        key = 'tau_0'
        labels[keys.index(key)] = r'$\tau_0$ [fm/c]'
    if 'qhat_A' in keys:
        key = 'qhat_A'
        for nPDF in nPDFs:
            data[nPDF][keys.index(key)] = \
                            np.exp(data[nPDF][keys.index(key)])-1.
        ranges[keys.index(key)] = np.exp(ranges[keys.index(key)]) - 1.
        labels[keys.index(key)] = r'$A$'
    if 'qhat_B' in keys:
        key = 'qhat_B'
        for nPDF in nPDFs:
            data[nPDF][keys.index(key)] = \
                            np.exp(data[nPDF][keys.index(key)])-1.
        ranges[keys.index(key)] = np.exp(ranges[keys.index(key)]) - 1.
        labels[keys.index(key)] = r'$B$ [GeV${}^2$]'
    

    cmap1 = plt.get_cmap('Blues')
    cmap1.set_bad('white')
    cmap2 = plt.get_cmap('Greens')
    cmap2.set_bad('white')
    cmaps = [cmap1, cmap2]

    line_colors = [cmap(.8) for cmap in cmaps]
    fill_colors = [cmap(.5, alpha=.1) for cmap in cmaps]

    fig, axes = plt.subplots(
        nrows=ndim, ncols=ndim,
        sharex='col', sharey='row',
        figsize=2*(scale*fullheight,)
    )

    sdict1 = {}
    sdict2 = {}
    for i, (samples1, samples2, key, lim, ax) in \
        enumerate(zip(data['EPPS'], data['nCTEQ'], keys, ranges, axes.diagonal())):
        interps = {}
        for j, (samples, line_color, fill_color) in \
            enumerate(zip([samples1, samples2], line_colors, fill_colors)):

            counts, edges = np.histogram(samples, bins=50, range=lim)
            x = (edges[1:] + edges[:-1]) / 2
            y = .85 * (lim[1] - lim[0]) * counts / counts.max() + lim[0]
            # smooth histogram with monotonic cubic interpolation
            interp = PchipInterpolator(x, y)
            interps[j] = interp
            x = np.linspace(x[0], x[-1], 10*x.size)
            y = interp(x)
            ax.plot(x, y, lw=1., color=line_color)
            ax.fill_between(x, lim[0], y, color=fill_color, zorder=-10)
        ax.set_xlim(lim)
        ax.set_ylim(lim)

        stex1, dict1 = format_ci(samples1)
        sdict1[i] = dict1
        ax.annotate(
            stex1, (.72, .86), xycoords='axes fraction',
            ha='center', va='bottom', fontsize=7, color=line_colors[0]
        )
        stex2, dict2 = format_ci(samples2)
        sdict2[i] = dict2
        ax.annotate(
            stex2, (.29, .86), xycoords='axes fraction',
            ha='center', va='bottom', fontsize=7, color=line_colors[1]
        )

    for ny, nx in zip(*np.tril_indices_from(axes, k=-1)):
        axes[ny][nx].hist2d(
            data['EPPS'][nx], data['EPPS'][ny], bins=100,
            range=(ranges[nx], ranges[ny]),
            cmap=cmap1, cmin=1
        )
        axes[ny][nx].set_xlim(ranges[nx])
        axes[ny][nx].set_ylim(ranges[ny])

        axes[ny][nx].errorbar(sdict1[nx]['m'], sdict1[ny]['m'],
                              xerr=[[sdict1[nx]['l']], [sdict1[nx]['h']]],
                              yerr=[[sdict1[ny]['l']], [sdict1[ny]['h']]],
                             color=line_colors[0], fmt='D')

        axes[nx][ny].hist2d(
            data['nCTEQ'][ny], data['nCTEQ'][nx], bins=100,
            range=(ranges[ny], ranges[nx]),
            cmap=cmap2, cmin=1
        )
        axes[nx][ny].set_xlim(ranges[ny])
        axes[nx][ny].set_ylim(ranges[nx])

        axes[nx][ny].errorbar(sdict2[ny]['m'], sdict2[nx]['m'],
                              xerr=[[sdict2[ny]['l']], [sdict2[ny]['h']]],
                              yerr=[[sdict2[nx]['l']], [sdict2[nx]['h']]],
                             color=line_colors[1], fmt='D')


    for key, label, axb, axl in zip(keys, labels, axes[-1], axes[:, 0]):
        for axis in [axb.xaxis, axl.yaxis]:
            axis.set_label_text(label, fontsize=10)
            axis.set_tick_params(labelsize=6)
            axis.set_major_locator(ticker.LinearLocator(3))
            if (
                    axis.axis_name == 'x'
                    and scale / ndim < .13
                    and any(len(str(x)) > 4 for x in axis.get_ticklocs())
            ):
                for t in axis.get_ticklabels():
                    t.set_rotation(30)

        axb.get_xticklabels()[0].set_horizontalalignment('left')
        axb.get_xticklabels()[-1].set_horizontalalignment('right')
        axl.get_yticklabels()[0].set_verticalalignment('bottom')
        axl.get_yticklabels()[-1].set_verticalalignment('top')


    set_tight(fig, pad=.05, h_pad=.1, w_pad=.1, rect=[0., 0., padr, padt])


@plot
def posterior():
    _posterior(scale=1.6, padr=1., padt=.99, nPDFs=['EPPS', 'nCTEQ'])


region_style = dict(color='.93', zorder=-100)
Tc = .154


@plot
def design():
    """
    Projection of a LH design into two dimensions.

    """
    fig = plt.figure(figsize=(.5*textwidth, .5*textwidth))
    ratio = 10
    gs = plt.GridSpec(ratio + 1, ratio + 1)

    ax_j = fig.add_subplot(gs[1:, :-1])
    ax_x = fig.add_subplot(gs[0, :-1], sharex=ax_j)
    ax_y = fig.add_subplot(gs[1:, -1], sharey=ax_j)

    d = Design(systems[0])

    keys = ('scale', 'qhat_A')
    indices = tuple(d.keys.index(k) for k in keys)

    x, y = (d.array[:, i] for i in indices)
    ax_j.plot(x, y, 'o', color=plt.cm.Blues(0.75), mec='white', mew=.3)

    hist_kw = dict(bins=30, color=plt.cm.Blues(0.4), edgecolor='white', lw=.5)
    ax_x.hist(x, **hist_kw)
    ax_y.hist(y, orientation='horizontal', **hist_kw)

    for ax in fig.axes:
        ax.tick_params(top='off', right='off')
        spines = ['top', 'right']
        if ax is ax_x:
            spines += ['left']
        elif ax is ax_y:
            spines += ['bottom']
        for spine in spines:
            ax.spines[spine].set_visible(False)
        for ax_name in 'xaxis', 'yaxis':
            getattr(ax, ax_name).set_ticks_position('none')

    auto_ticks(ax_j)

    for ax in ax_x, ax_y:
        ax.tick_params(labelbottom='off', labelleft='off')

    for i, xy in zip(indices, 'xy'):
        for f, l in [('lim', d.range), ('label', d.labels)]:
            attr = 'set_{}{}'.format(xy, f)
            arg = l[i]
            print(attr, l, l[i])
            getattr(ax_j, attr)(arg)


@plot
def gp():
    """
    Conditioning a Gaussian process.

    """
    fig, axes = plt.subplots(
        figsize=(.47*textwidth, .9*textheight),
        nrows=2, sharex='col'
    )

    def dummy_optimizer(obj_func, initial_theta, bounds):
        return initial_theta, 0.

    gp = GPR(1.*kernels.RBF(.8), optimizer=dummy_optimizer)

    def sample_y(*args, **kwargs):
        with warnings.catch_warnings():
            warnings.simplefilter('ignore', RuntimeWarning)
            return gp.sample_y(*args, **kwargs)

    x = np.linspace(0, 5, 1000)
    X = x[:, np.newaxis]

    x_train = np.linspace(.5, 4.5, 4)
    X_train = x_train[:, np.newaxis]

    for title, ax in zip(['Random functions', 'Conditioned on data'], axes):
        if title.startswith('Conditioned'):
            y = sample_y(X_train, random_state=23158).squeeze()
            y -= .5*(y.max() + y.min())
            gp.fit(X_train, y)
            training_data, = plt.plot(x_train, y, 'o', color='.3', zorder=50)

        for s, c in zip(
                sample_y(X, n_samples=4, random_state=34576).T,
                ['Blues', 'Greens', 'Oranges', 'Purples']
        ):
            ax.plot(x, s, color=getattr(plt.cm, c)(.6))

        mean, std = gp.predict(X, return_std=True)
        std = ax.fill_between(x, mean - std, mean + std, color='.92')
        mean, = ax.plot(x, mean, color='.42', dashes=(3.5, 1.5))

        ax.set_ylim(-2, 2)
        ax.set_ylabel('Output')
        auto_ticks(ax)

        ax.set_title(title, y=.9)

    ax.set_xlabel('Input')
    ax.legend(*zip(*[
        (mean, 'Mean prediction'),
        (std, 'Uncertainty'),
        (training_data, 'Training data'),
    ]), loc='lower left')
    set_tight(fig, h_pad=1)


@plot
def pca():
    fig = plt.figure(figsize=(.45*textwidth, .45*textwidth))
    ratio = 5
    gs = plt.GridSpec(ratio + 1, ratio + 1)

    ax_j = fig.add_subplot(gs[1:, :-1])
    ax_x = fig.add_subplot(gs[0, :-1], sharex=ax_j)
    ax_y = fig.add_subplot(gs[1:, -1], sharey=ax_j)

    x, y = (
        model.data['PbPb5020']['EPPS'][exp][obs][specie][cent]['Y'][:, index]
        for exp, obs, specie, cent, index in [('CMS', 'RAA', 'D0', '0-10', 5),
                                          ('ALICE','V2', 'D-avg', '30-50', 2)]
    )
    x = np.log(x)
    xlabel = r'$R_{AA}, 0-10\%, 8 < p_T < 10$ [GeV]'
    ylabel = r'$v_2\{2\}, 30-50\%, 2 < p_T < 3$ [GeV]'
    xlim = -4, 0
    ylim = 0.05, 0.3

    cmap = plt.cm.Blues

    ax_j.plot(x, y, 'o', color=cmap(.75), mec='white', mew=.25, zorder=10)

    for d, ax, orientation in [(x, ax_x, 'vertical'), (y, ax_y, 'horizontal')]:
        ax.hist(
            d, bins=10,
            orientation=orientation, color=cmap(.4), edgecolor='white'
        )

    xy = np.column_stack([x, y])
    xymean = xy.mean(axis=0)
    xystd = xy.std(axis=0)
    xy -= xymean
    xy /= xystd
    pca = PCA().fit(xy)
    pc = (
        7 * xystd *
        pca.explained_variance_ratio_[:, np.newaxis] *
        pca.components_
    )

    for w, p in zip(pca.explained_variance_ratio_, pc):
        print(w)
        if np.all(p < 0):
            p *= -1
        p = p/(p**2).sum()**0.25*0.8
        print(p)
        ax_j.annotate(
            '', xymean + p, xymean, zorder=20,
            arrowprops=dict(
                arrowstyle='->', shrinkA=0, shrinkB=0,
                color=offblack, lw=.7
            )
        )
        ax_j.text(
            *(xymean + p + (.1, .002)*np.sign(p)), s='{:.0f}%'.format(100*w),
            color=offblack, ha='center', va='top' if p[1] < 0 else 'bottom',
            zorder=20
        )

    for ax in fig.axes:
        ax.tick_params(top='off', right='off')
        spines = ['top', 'right']
        if ax is ax_x:
            spines += ['left']
        elif ax is ax_y:
            spines += ['bottom']
        for spine in spines:
            ax.spines[spine].set_visible(False)
        for ax_name in 'xaxis', 'yaxis':
            getattr(ax, ax_name).set_ticks_position('none')

    for ax in ax_x, ax_y:
        ax.tick_params(labelbottom='off', labelleft='off')

    auto_ticks(ax_j)

    ax_j.set_xlim(xlim)
    ax_j.set_ylim(ylim)

    ax_j.set_xlabel(xlabel)
    ax_j.set_ylabel(ylabel)

    set_tight(pad=.1, h_pad=.3, w_pad=.3)


@plot
def trento_events():
    """
    Random trento events.

    """
    fig, axes = plt.subplots(
        nrows=3, sharex='col',
        figsize=(.28*textwidth, .85*textheight)
    )

    xymax = 8.
    xyr = [-xymax, xymax]

    with tempfile.NamedTemporaryFile(suffix='.hdf') as t:
        subprocess.run((
            'trento Pb Pb {} --quiet --b-max 12 '
            '--grid-max {} --grid-step .1 '
            '--random-seed 6347321 --output {}'
        ).format(axes.size, xymax, t.name).split())

        with h5py.File(t.name, 'r') as f:
            for dset, ax in zip(f.values(), axes):
                ax.pcolorfast(xyr, xyr, np.array(dset['matter_density']), cmap=plt.cm.Blues)
                ax.set_aspect('equal')
                for xy in ['x', 'y']:
                    getattr(ax, 'set_{}ticks'.format(xy))([-5, 0, 5])

    axes[-1].set_xlabel('$x$ [fm]')
    axes[1].set_ylabel('$y$ [fm]')

    set_tight(fig, h_pad=.5)


def boxplot(
        ax, percentiles, x=0, y=0, box_width=1, line_width=1,
        color=(0, 0, 0), alpha=.6, zorder=10
):
    """
    Draw a minimal boxplot.

    `percentiles` must be a np.array of five numbers:

        whisker_low, quartile_1, median, quartile_3, whisker_high

    """
    pl, q1, q2, q3, ph = percentiles + y

    # IQR box
    ax.add_patch(patches.Rectangle(
        xy=(x - .5*box_width, q1),
        width=box_width, height=(q3 - q1),
        color=color, alpha=alpha, lw=0, zorder=zorder
    ))

    # median line
    ax.plot(
        [x - .5*box_width, x + .5*box_width], 2*[q2],
        lw=line_width, solid_capstyle='butt', color=color,
        zorder=zorder + 1
    )

    # whisker lines
    for y in [[q1, pl], [q3, ph]]:
        ax.plot(
            2*[x], y, lw=line_width, solid_capstyle='butt',
            color=color, alpha=alpha, zorder=zorder
        )


@plot
def validation_all(system='PbPb2760'):
    """
    Emulator validation: normalized residuals and RMS error for each
    observable.

    """
    fig, (ax_box, ax_rms) = plt.subplots(
        nrows=2, figsize=(10, 4),
        gridspec_kw=dict(height_ratios=[1.5, 1])
    )

    index = 1
    ticks = []
    ticklabels = []

    vdata = model.validation_data[system]
    emu = emulators[system]
    mean, cov = emu.predict(
        Design(system, validation=True).array,
        return_cov=True
    )

    def label(obs, subobs):
        if obs.startswith('d') and obs.endswith('_deta'):
            return r'$d{}/d\eta$'.format(
                {'Nch': r'N_\mathrm{ch}', 'ET': r'E_T'}[obs[1:-5]])

        id_parts_labels = {'dN_dy': 'dN/dy', 'mean_pT': r'\langle p_T \rangle'}
        if obs in id_parts_labels:
            return '${}\ {}$'.format(
                id_parts_labels[obs],
                {'pion': '\pi', 'kaon': 'K', 'proton': 'p'}[subobs]
            )

        if obs == 'pT_fluct':
            return r'$\delta p_T/\langle p_T \rangle$'

        if obs == 'vnk':
            return r'$v_{}\{{{}\}}$'.format(*subobs)

    for obs, subobslist in emu.observables:
        for subobs in subobslist:
            color = obs_color(obs, subobs)

            Y = vdata[obs][subobs]['Y']
            Y_ = mean[obs][subobs]
            S_ = np.sqrt(cov[(obs, subobs), (obs, subobs)].T.diagonal())

            Z = (Y_ - Y)/S_

            for i, percentiles in enumerate(
                    np.percentile(Z, [10, 25, 50, 75, 90], axis=0).T,
                    start=index
            ):
                boxplot(ax_box, percentiles, x=i, box_width=.75, color=color)

            rms = 100*np.sqrt(np.square(Y_/Y - 1).mean(axis=0))
            ax_rms.plot(
                np.arange(index, index + rms.size), rms, 'o', color=color
            )

            ticks.append(.5*(index + i))
            ticklabels.append(label(obs, subobs))

            index = i + 2

    ax_box.set_xticks(ticks)
    ax_box.set_xticklabels(ticklabels)
    ax_box.tick_params('x', bottom=False, labelsize=plt.rcParams['font.size'])

    ax_box.set_ylim(-2.5, 2.5)
    ax_box.set_ylabel(r'Normalized residuals')

    q, p = np.sqrt(2) * special.erfinv(2*np.array([.75, .90]) - 1)
    ax_box.axhspan(-q, q, color='.85', zorder=-20)
    for s in [-1, 0, 1]:
        ax_box.axhline(s*p, color='.5', zorder=-10)

    ax_q = ax_box.twinx()
    ax_q.set_ylim(ax_box.get_ylim())
    ax_q.set_yticks([-p, -q, 0, q, p])
    ax_q.set_yticklabels([10, 25, 50, 75, 90])
    ax_q.tick_params('y', right=False)
    ax_q.set_ylabel(
        'Normal quantiles',
        fontdict=dict(rotation=-90),
        labelpad=3*plt.rcParams['axes.labelpad']
    )

    ax_rms.set_xticks([])
    ax_rms.set_yticks(np.arange(0, 16, 5))
    ax_rms.set_ylim(0, 15)
    ax_rms.set_ylabel('RMS % error')

    for y in ax_rms.get_yticks():
        ax_rms.axhline(y, color='.5', zorder=-10)

    for ax in fig.axes:
        ax.set_xlim(0, index - 1)
        ax.spines['bottom'].set_visible(False)


@plot
def validation_example(
        system='PbPb2760',
        obs='dNch_deta', subobs=None,
        label=r'$dN_\mathrm{ch}/d\eta$',
        cent=(20, 30)
):
    """
    Example of emulator validation for a single observable.  Scatterplot of
    model calculations vs emulator predictions with histogram and boxplot of
    normalized residuals.

    """
    fig, axes = plt.subplots(
        ncols=2, figsize=(4., 2.5),
        gridspec_kw=dict(width_ratios=[3, 1])
    )

    ax_scatter, ax_hist = axes

    vdata = model.validation_data[system][obs][subobs]
    cent_slc = (slice(None), vdata['cent'].index(cent))
    y = vdata['Y'][cent_slc]

    mean, cov = emulators[system].predict(
        Design(system, validation=True).array,
        return_cov=True
    )
    y_ = mean[obs][subobs][cent_slc]
    std_ = np.sqrt(cov[(obs, subobs), (obs, subobs)].T.diagonal()[cent_slc])

    color = obs_color(obs, subobs)
    alpha = .6

    ax_scatter.set_aspect('equal')
    ax_scatter.errorbar(
        y_, y, xerr=std_,
        fmt='o', ms=2.5, mew=.1, mec='white',
        color=color, alpha=alpha
    )
    dy = .03*y.ptp()
    x = [y.min() - dy, y.max() + dy]
    ax_scatter.plot(x, x, color='.4')
    ax_scatter.set_xlabel('Emulator prediction')
    ax_scatter.set_ylabel('Model calculation')
    ax_scatter.text(
        .04, .96, '{} {}–{}%'.format(label, *cent),
        horizontalalignment='left', verticalalignment='top',
        transform=ax_scatter.transAxes
    )

    zmax = 3.5
    zrange = (-zmax, zmax)

    z = (y_ - y)/std_

    ax_hist.hist(
        z, bins=30, range=zrange, normed=True,
        orientation='horizontal', color=color, alpha=alpha
    )
    x = np.linspace(-zmax, zmax, 1000)
    ax_hist.plot(np.exp(-.5*x*x)/np.sqrt(2*np.pi), x, color='.25')

    box_x = .75
    box_width = .1

    boxplot(
        ax_hist, np.percentile(z, [10, 25, 50, 75, 90]),
        x=box_x, box_width=box_width, color=color, alpha=alpha
    )

    guide_width = 2.5*box_width

    q, p = np.sqrt(2) * special.erfinv(2*np.array([.75, .90]) - 1)
    ax_hist.add_patch(patches.Rectangle(
        xy=(box_x - .5*guide_width, -q),
        width=guide_width, height=2*q,
        color='.85', zorder=-20
    ))
    for s in [-1, 0, 1]:
        ax_hist.plot(
            [box_x - .5*guide_width, box_x + .5*guide_width], 2*[s*p],
            color='.5', zorder=-10
        )

    ax_hist.set_ylim(zrange)
    ax_hist.spines['bottom'].set_visible(False)
    ax_hist.tick_params('x', bottom=False, labelbottom=False)
    ax_hist.set_ylabel('Normalized residuals')

    ax_q = ax_hist.twinx()
    ax_q.spines['bottom'].set_visible(False)
    ax_q.set_ylim(ax_hist.get_ylim())
    ax_q.set_yticks([-p, -q, 0, q, p])
    ax_q.set_yticklabels([10, 25, 50, 75, 90])
    ax_q.tick_params('y', right=False)
    ax_q.set_ylabel(
        'Normal quantiles',
        fontdict=dict(rotation=-90),
        labelpad=3*plt.rcParams['axes.labelpad']
    )


default_system = 'PbPb5020'
default_nPDF = 'EPPS'

@plot
def diag_pca(system=default_system, nPDF=default_nPDF):
    """
    Diagnostic: histograms of principal components and scatterplots of pairs.

    """
    Y = [g.y_train_ for g in emulators[nPDF][system].gps]
    n = len(Y)
    ymax = np.ceil(max(np.fabs(y).max() for y in Y))
    lim = (-ymax, ymax)

    fig, axes = plt.subplots(nrows=n, ncols=n, figsize=2*(n,))

    for y, ax in zip(Y, axes.diagonal()):
        ax.hist(y, bins=10)
        ax.set_xlim(lim)

    for ny, nx in zip(*np.tril_indices_from(axes, k=-1)):
        ax = axes[ny][nx]
        ax.scatter(Y[nx], Y[ny])
        ax.set_xlim(lim)
        ax.set_ylim(lim)
        axes[nx][ny].set_axis_off()

    for i in range(n):
        label = 'PC {}'.format(i)
        axes[-1][i].set_xlabel(label)
        axes[i][0].set_ylabel(label)


@plot
def diag_emu(system=default_system, nPDF=default_nPDF):
    """
    Diagnostic: plots of each principal component vs each input parameter,
    overlaid by emulator predictions at several points in design space.

    """
    gps = emulators[nPDF][system].gps
    nrows = len(gps)
    ncols = gps[0].X_train_.shape[1]

    w = 1.8
    fig, axes = plt.subplots(
        nrows=nrows, ncols=ncols,
        figsize=(ncols*w, .8*nrows*w)
    )

    ymax = np.ceil(max(np.fabs(g.y_train_).max() for g in gps))
    ylim = (-ymax, ymax)

    design = Design(system)

    for ny, (gp, row) in enumerate(zip(gps, axes)):
        y = gp.y_train_

        for nx, (x, label, xlim, ax) in enumerate(zip(
                gp.X_train_.T, design.labels, design.range, row
        )):
            ax.plot(x, y, 'o', ms=.8, color='.75', zorder=10)

            x = np.linspace(xlim[0], xlim[1], 100)
            X = np.empty((x.size, ncols))

            for k, r in enumerate([.2, .5, .8]):
                X[:] = r*design.min + (1 - r)*design.max
                X[:, nx] = x
                mean, std = gp.predict(X, return_std=True)

                color = plt.cm.tab10(k)
                ax.plot(x, mean, lw=.2, color=color, zorder=30)
                ax.fill_between(
                    x, mean - std, mean + std,
                    lw=0, color=color, alpha=.3, zorder=20
                )

            ax.set_xlim(xlim)
            ax.set_ylim(ylim)

            ax.set_xlabel(label)
            ax.set_ylabel('PC {}'.format(ny))


if __name__ == '__main__':
    import argparse
    from matplotlib.mathtext import MathTextWarning

    warnings.filterwarnings(
        'ignore',
        category=MathTextWarning,
        message='Substituting with a symbol from Computer Modern.'
    )

    choices = list(plot_functions)

    def arg_to_plot(arg):
        arg = Path(arg).stem
        if arg not in choices:
            raise argparse.ArgumentTypeError(arg)
        return arg

    parser = argparse.ArgumentParser(description='generate plots')
    parser.add_argument(
        'plots', nargs='*', type=arg_to_plot, metavar='PLOT',
        help='{} (default: all)'.format(', '.join(choices).join('{}'))
    )
    args = parser.parse_args()

    if args.plots:
        for p in args.plots:
            plot_functions[p]()
    else:
        for f in plot_functions.values():
            f()
